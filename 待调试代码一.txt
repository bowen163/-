#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<iostream>
using namespace std;
#define MaxSize 100//定义最大队列长度
typedef struct               //车辆信息的结构体
{
	char name[];//车牌号 
    int ahour;//到达时间 （小时） 
    int dhour;//离开时间 （小时）
    int aminute;//到达时间 （分钟） 
    int dminute;//离开时间 （分钟）
    int place;//车辆位置 
}Carinformation;
//定义双堆栈结构 
typedef int Position;
typedef int ElementType;
typedef struct SNode*PtrToSNode;
struct SNode//双栈结构体 
{
	Carinformation *Car;
	ElementType *data;
	Position TOP1;
	Position TOP2;
	int Maxsize;
};
typedef PtrToSNode Stack;
typedef struct node * position;//队列中结点 
struct node {
	Carinformation roadcar;
	position next;
};
typedef struct road * q;
struct road {
	position front;//队列头尾指针 
	position rear;
	int maxsize;//队列最大容量
 
};
typedef q queue;
queue CreateQueue(){
	position r;
	r=(position)malloc(sizeof(struct node));
	r->next=NULL;//头指针初始化 
	queue q;
	q->front=r;//都等于头指针 
	q->rear=r;
	return q; 
}

bool IsFull(queue q){//判断队空
	return (q->front->next==NULL);
}

queue AddQ(queue q,Carinformation x){//入队
	position p;
	p=(position)malloc(sizeof(struct node));
	p->roadcar=x;
	p->next=NULL;
	q->rear->next=p;
	q->rear=p;	
	return q;
	
}

Carinformation deleteq(queue q){//出队
	position p;
	Carinformation e;
	if(IsFull(q)!=true){
		p=q->front->next;
		e=p->roadcar;
		q->front->next=p->next;
		if(q->rear==p){
			q->rear=q->front;
		}
		free(p);
		return e;
	}
}

//1.栈的创建 
Stack CreateStack(int Maxsize)
{
	Stack s=(Stack)malloc(sizeof(struct SNode));
	s->Car=(Carinformation*)malloc(Maxsize*sizeof(Carinformation));
	s->data=(ElementType*)malloc(Maxsize*sizeof(ElementType));
	s->TOP1=-1;
	s->TOP2=Maxsize;
	s->Maxsize = Maxsize;
	return s;
}
//2.入栈操作 
bool Push(Stack s,ElementType x,Carinformation e,char tag,queue q)
{
	if(s->TOP2-s->TOP1==1){//栈满 
		q=AddQ(q,e);//入队列 
		return 0;
	}
	else{
		if(tag=='A')
		{	
		s->Car->ahour=e->ahour;
		s->data[++(s->TOP1)]=x;
		printf("Stack1 插入成功\n");	
	    }
	    else if(tag=='D')
		{   s->data[--(s->TOP2)]=x;
			 printf("Stack2 插入成功\n");
		}
		
	return 1;
    }
}
//3.出栈操作 
ElementType Pop(Stack s,char tag)
{
	if(tag=='A')
	{	if(s->TOP1==-1)	
		{
			printf("The Stack1 is full");
			return 0;//判A栈空, A表示到达(Arrival);
			
		}
		else 
		{
		printf("Stack1 出栈成功\n");
		return s->data[(s->TOP1)--];
		} 
	}
	else if(tag=='D')
	{  
	    if(s->TOP2==s->Maxsize)
		{
			return 0;//判D栈空 ,D表示离去(Departure);
			printf("The Stack2 is full");
		 } 
		 else { 
	     printf("Stack2 出栈成功\n");
		 return s->data[(s->TOP2)++];
		 } 
	}	
} 

int main()
{
	Stack c =CreateStack(100);
	ElementType x,*ptr;

	return 0;
	
}


